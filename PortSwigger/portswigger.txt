SQL INJECTIONS
--------------

Inj.1 - Retriving hidden data
.............................

- Assuming a website with URL: https://insecure-website.com/products?category=Gifts'--
This results in a particular SQL query: SELECT * FROM products WHERE category = 'Gifts'--' AND released = 1

- What exactly is the '--'?
A -- is an SQL comment. Anything after this in a query is not applied.
We can also view products in categories that the attacker doesn't know about AKA

https://insecure-website.com/products?category=Gifts' + OR + 1=1--

This will return all items.

Inj.2 - Subverting application logic
....................................

- If an app uses a SQL where query to check for username and password, 
an attacker can inject a '--' after the username check to ignore the
password check. 

Inj.3 - Retriving data from other database tables
.................................................

- Never return an SQL query as an application response because this lets
attackers use the UNION keyword i.e. an additional SQL query.

query: SELECT name, description FROM products WHERE category = 'Gifts'
injection: ' UNION SELECT username, password FROM users--

First order injection = application takes user input for HTTP request and processes the input as SQL statement and executes it
Second order injection = application takes user input for HTTP request but stores it in a DB. While performing a different
request, the original is taken from the DB and is executed. 

Authentication
--------------

- Remember, the host parameter in the web is the request originator. 

Auth.1 - Username enumeration and password brute forcing
........................................................

- Always return the same status code for an incorrect username/password combination. Some websites return a different status
code for one, which will lead the attacker to believe one was correct. Same with error messages and response times (tricky eh?)
- The OWASP ZAP fuzzer is great for this

Directory Traversal
-------------------

Dir.1 Reading arbitrary files
.............................

- If an image is attached from the /var/www/images folder using a path parameter like loadfile?img1.png, a ../../../etc/passwd
can be attached to obtain and read the password file from the server.
- If a website strips file traversal operations, you can use nested file traversals which'll work after the outer ones get
stripped. Example - ...../ or something like that. These sanitations can sometimes also be bypassed by URL encoding the
traversal characters.
- There are literally thousands of situations and attacks possible, as this tutorial shows. For instance, a particularly
interesting one is: if an application requires the filename to end in .jpg, you could do a file traversal with a null-byte
at the end i.e. ../../../etc/passwd%00.png (null byte ends the string)
- Just don't let user-supplied information affect the filesystem.

OS Command Injection
--------------------

OCI.1 Executing arbitrary commands
..................................

- & is the shell command seperator. So, if you know that a certain feature is using shell commands, try injecting input such as
command & echo "Using shell commands" to test OS command injection.
- If an API endpoint takes in parameters, try injecting OS commands like echo or whoami in there. However, for some reason, the
parameter only was injectable by giving it one valid argument and then a | OS_command_here. 
- Knowing that system is vulnerable to this kind of injection can be destructive/informative (you can find out tons of 
info about the system)
- If the system doesn't return any information about a shell command being run, this is a blind command injection.

So this begs the question, how would you detect these?

OCI.2 Ways to inject blind OS command injection
...............................................

TIME DELAYS

- The ping command in linux allows you to send a certain number of ICMP packets. Not sure how this makes it happen, but it'll
create a time delay and thereby allow you to know whether a command was run or not.

REDIRECTING OUTPUT

- Since most systems don't return the output given by OS commands, you can add additional redirection commands to determine when
a blind OS command injection is possible.

There's a bunch of characters which you can inject into vulnerable spots to elicit reactions from the server like &, |, `, etc.
All this is also dependent on the kind of system being used.

Best way of protection: never call OS level commands from application code.

Broken Access Control
---------------------

- This is a vulnerability which takes advantage of different resources being available for different groups, with not enough
controls for securing it. 

Example - the admin site not being locked down properly

BAC.1 Broken access control resulting from platform misconfiguration
....................................................................

- Some applications deny endpoints at the platform level, which may be overriden by some sepcial request headers. If a
skiller hacker knows this, he'll take advantage of it.
- A good way to find vulnerabilites is to make tons of requests through ZAP, add the website to your context if you have to,
and just search through everything to find the kind of response you want, whether it be cookies, the actual response, the request
or whatever.

Note of the day - the key in security/hacking is to be carefully open-minded to a robotic level; your answer could lie literally
anywhere, so be prepared to check anywhere, everywhere, all at once.

- User id's controller by parameters are obviously insecure
- User id's passed in by unpredictable UUID's are also insecure as they may be revealed elsewhere, like in comments, likes, or
whatever else
