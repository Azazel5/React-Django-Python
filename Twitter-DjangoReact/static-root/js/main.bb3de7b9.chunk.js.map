{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","unshift","content","likes","id","console","log","ref","name","required","type","TweetsList","ActionBtn","tweet","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","Tweet","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","send","loadTweets","alert","map","item","index","key","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","app","document","getElementById","ReactDOM","render","StrictMode","tweetEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bb3de7b9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useState }  from 'react'\nimport {loadTweets} from '../lookup'\n\nexport function TweetsComponent(props) {\n  const textAreaRef = React.createRef()\n  const [newTweets, setNewTweets] = useState([])\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    const newVal = textAreaRef.current.value\n    let tempNewTweets = [...newTweets]\n    tempNewTweets.unshift({\n      content: newVal, \n      likes: 0, \n      id: 2134\n    })\n    setNewTweets(tempNewTweets)\n    console.log(newVal)\n    textAreaRef.current.value = ''\n  }\n\n  return <div className={props.className}>\n            <div className='col-12 mb-3'>\n            <form onSubmit={handleSubmit}>\n            <textarea ref={textAreaRef} className='form-control' name='tweet' required={true}>\n            </textarea>\n            <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n          </form>\n          </div>\n          <TweetsList newTweets={newTweets}/>\n    </div>\n}\n\nexport function ActionBtn(props) {\n    const {tweet, action} = props \n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\n    const [userLike, setUserLike] = useState(tweet.userLike === true ? true : false)\n    const className = props.className ? props.className : 'btn btn-primary btn-small'\n    const actionDisplay = action.display ? action.display : 'Action'\n    const handleClick = (event) => {\n        event.preventDefault()\n        if (action.type === 'like') {\n            if(userLike === true) {\n              setLikes(likes - 1)\n              setUserLike(false)\n            } else {\n              setLikes(tweet.likes + 1)\n              setUserLike(true)\n            }\n            \n        }\n    }\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}`: actionDisplay\n    return <button className={className} onClick={handleClick}>{display}</button>\n  }\n  \nexport function Tweet(props) {\n    const {tweet} = props \n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n    return <div className={className}>\n        <p>{tweet.id} - {tweet.content}</p>\n        <div className='btn btn-group'>\n          <ActionBtn tweet={tweet} action={{type: \"like\", display:\"Likes\"}} />\n          <ActionBtn tweet={tweet} action={{type: \"unlike\", display:\"Unlike\"}} />\n          <ActionBtn tweet={tweet} action={{type: \"retweet\", display:\"Retweet\"}} />\n\n        </div>\n    </div>\n  }\n\nexport function TweetsList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    useEffect(() => {\n      const final = [...props.newTweets].concat(tweetsInit)\n      if (final.length !== tweets.length) {\n        setTweets(final)\n      }\n    }, [props.newTweets, tweets, tweetsInit])\n\n    useEffect(() => {\n      const myCallback = (response, status) => {\n        if (status === 200) {\n          setTweetsInit(response)\n        } else {\n          alert(\"There was an error.\")\n        }\n      }\n      loadTweets(myCallback)\n    }, [])\n  \n    return tweets.map((item, index) => {\n      return <Tweet tweet={item} key={`${index}-{item.id}`} className='my-5 py-5 border bg-white text-dark'/>\n    })\n  \n  }\n  ","export function loadTweets(callback) {\n    const xhr = new XMLHttpRequest()\n    const method = 'GET'\n    const url = 'http://localhost:8000/api/tweets'\n    const responseType = 'json'\n\n    xhr.responseType = responseType\n    xhr.open(method, url)\n    xhr.onload = function () {\n        callback(xhr.response, xhr.status)\n    }\n    xhr.onerror = function (e) {\n        console.log(e)\n        callback({\"message\": \"The request was an error\"}, 400)\n    }\n    xhr.send()\n}\n  ","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponent} from './tweets'\n\n\nfunction App() {\n \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponent} from './tweets'\nimport * as serviceWorker from './serviceWorker';\n\nconst app = document.getElementById('root')\nif (app) {\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>, app);\n}\n\nconst tweetEl = document.getElementById(\"tweetme-2\")\nif (tweetEl) {\n  ReactDOM.render(<TweetsComponent />, tweetEl);\n\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}