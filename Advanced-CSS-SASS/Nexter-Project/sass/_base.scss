// COLOR VARIABLES
$color-primary: #c69963;
$color-primary-dark: #B28451;

$color-secondary: #101d2c;

$color-grey-light-1: #f9f7f6;
$color-grey-light-2: #aaa;

$color-grey-dark-1: #54483A;
$color-grey-dark-2: #6D5D4B;

// FONT VARIABLES
$font-primary: 'Nunito', sans-serif;
$font-display: 'Josefin Sans', sans-serif;

// Responsive breakpoints 
$bp-largest: 75em;
$bp-large: 62.5em;
$bp-medium: 50em;
$bp-small: 37.5em;

*, 
*::before,
*::after {
    margin: 0;
    padding: 0;
    box-sizing: inherit;
}

html {
    box-sizing: border-box;
    font-size: 62.5%;

    @media only screen and (max-width: $bp-largest) {
        font-size: 50%;
    }
}

body {
    font-family: $font-primary;
    color: $color-grey-dark-2;
    font-weight: 300;
    line-height: 1.6;
}

/* Min-content makes the rows or columns adapt to the minimum length required for the content to fit
 * into the grid row/column -> an easy and effective way to make things more responsive  
 * Another extremely effective way to make responsive grid columns or rows is to use the minmax function,
 * which can specify a range of values i.e. the min and the max that the element can take. 
 * Here we have used a complicated way to center the grid (adding the extra fr's after the 8rem sidebar
 * column) because this particular situation couldn't be solved by other easier alternatives, such as 
 * margin: 0 auto or justify-content. 
 * Taking some time to painstakenly name all the grids may pay dividends while using it, as referencing the 
 * names will be way easier: note, this is only for big grids like this one.
 * Do media queries in 100px steps: for example, if the screen starts looking wonky at the 719px mark, write
 * the media queries for 800px. 
*/
.container {
    display: grid;
    grid-template-rows: 80vh min-content 40vw repeat(3, min-content);
    grid-template-columns: [sidebar-start] 8rem [sidebar-end full-start]
                            minmax(6rem, 1fr) [center-start] 
                            repeat(8, [col-start] minmax(min-content, 14rem) [col-end])
                            [center-end] minmax(6rem, 1fr) [full-end];


    @media only screen and (max-width: $bp-large) {
        grid-template-rows: 6rem 80vh min-content 40vw repeat(3, min-content);
        grid-template-columns: [full-start]
                                minmax(6rem, 1fr) [center-start] 
                                repeat(8, [col-start] minmax(min-content, 14rem) [col-end])
                                [center-end] minmax(6rem, 1fr) [full-end];
    }

    // The rows which you explicitly wanna size should be defined; otherwise, the automatic placement
    // algorithm will take care of everything else
    @media only screen and (max-width: $bp-medium) {
        grid-template-rows: 6rem calc(100vh - 6rem);
    }
}