@import "abstracts/functions";
@import "abstracts/mixins";
@import "abstracts/variables";

@import "base/animations";
@import "base/base";
@import "base/typography";
@import "base/utilities";

@import "components/button";
@import "components/composition";
@import "components/feature-box";
@import "components/card";

@import "layout/header";
@import "layout/grid";

@import "pages/home";

/* Try to add multiple classes and make one class as general as possible
 * Eg. There will be many buttons so .btn is general, and we simply added the class below
 * to the animated button. Animation-fill-mode: backwards; applies styles from the 0%
 * keyframe in the beginning otherwise the button starts at 0, goes to 30, and comes back
 * to 0 (as there is a delay).
 */

/* CSS Specificity
*  ---------------
* Stylesheets are parsed and cascaded on the basis of the specificity of the selector, which 
* goes in the order of !important, inline, id, class, element 
* The selector with the higher specificty (a, b, c, d) wins
* Tips: a) remember that pseudo classes count as a class value and b) order css rule in decreasing
* order of specificity eg. #my-div .divvy > element {}
* rem - the rem unit is relative to the root font size, eg 1.5rem = 1.5 * 16 (if no root font has 
* been specified)
*/

/* Some props like font-size are inherited from the parent, unless overriden in the child.
 * The parent's width is the basis for percentage calculations; eg, padding: 10%; is 10% of width.
 * em and rem are both font-based, but em uses the current element's parent while rem uses the root
 * as a reference. This is only for fonts. If em is used for lengths, it uses the current element's
 * font-size; for rem, it's the same in both cases, as it simply uses the root.
 * vh/vw is useful as well
 */

/* A beautiful tactic: set the root font-size as 10px and set all paddings, margins, box shadows, etc
 * as rem multiples. By that, just changing the root value will change all item's in an equal manner.
 * Even better, put 62.5% as the root font-size (as it will be 10 anyways if the browser value
 * is used, and will increase naturally if it's some other user-defined value)
 */


/* For HTML/CSS, organization becomes crucial, as the code starts getting messy.
 * A good way to organize is to follow the BEM model, block, block__element, 
 * block__element--model, eg - button, button__text, button__text--bold 
 */

/* The clearfix solution: add a clearfix class to the floated portion, and, in the css, attach
 * an ::after selector to the class. Add the following props: content: "", clear: both, and 
 * display:table. Or you could simply add it to the element::after. SASS comes with color
 * functions, such as darken(color_variable, percentage). Check them out!
 * You can create reusable pieces of CSS code (such as the clearfix thing), by doing 
 * @mixin mixin_name {}, then @include mixin_name inside any selector. You can add arguments
 * as well. You can create functions with @function in a similar manner. Inheritance is
 * available as well. Create a parent 'class' by the %placeholder and extend that by 
 * @extend %placeholder
 */