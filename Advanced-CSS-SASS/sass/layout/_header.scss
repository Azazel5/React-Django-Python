
/*
 * You can add gradients over background images by giving opacities. 
 * clip-path can cut elements into whatever shape you want. you can define polygons, 
 * circles, whatever by giving coordinates, to create pretty shapes.
 */
.header {
    position: relative;
     background-image: linear-gradient(
        to right bottom,
        rgba($color-primary-light, .8),
        rgba($color-primary-dark, .8)),
        url('../img/hero-small.jpg');

    background-size: cover;
    background-position: top;

    // The resolution of apple screens, which is pretty high
    // You can add media queries together
    // Also remember, there are other kinds of media queries (such as min-resolution)
    // Phones usually have a DPR of 2x, so it doesn't make sense to have images > 1200px in width 
    // Commas are like OR's in CSS

    /* 
     * min-resolution doesn't work on safari! The fix: webkit-min-device-pixel-ratio: 2 
     * min-dpr: 2 should be the same as min-resolution: 192dpi
     */
    @media only screen and (min-resolution: 192dpi) and (min-width: 37.5em),
    only screen and (-webkit-min-device-pixel-ratio: 2) and (min-width: 37.5em),
    only screen and (min-width: 125em)  {
        background-image: linear-gradient(
            to right bottom,
            rgba($color-primary-light, .8),
            rgba($color-primary-dark, .8)),
            url('../img/hero.jpg');
    }

    @include respond(phone) {
        -webkit-clip-path: polygon(0 0, 100% 0, 100% 85vh, 0 100%);
        clip-path: polygon(0 0, 100% 0, 100% 85vh, 0 100%);
    }

    @supports(clip-path: polygon(0 0)) or (-webkit-clip-path: polygon(0 0)) {
        height: 95vh;
        -webkit-clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
        clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
    }

    /*
    * There has to be a reference from where the absolute elements positioning begins, which is 
    * precisely why the parent element needs a position: relative; 
    */
    &__logo-box {
        position: absolute;
        top: 4rem;
        left: 40px;
    }

    &__logo {
        height: 3.5rem;
    }
    
    /* Span elements are by default inline; block level elements take space before and after and 
     * occupy the full width they're given.
     * Centering by position absolute isn't as simple as top: 50% and left: 50%, as that aligns
     * only the top left of the element in the center (not making it look like it's in the center).
     * Add: transform: translate(-50%, -50%)
     */
    &__text-box {
        position: absolute;
        top: 40%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
    }
}