{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Link from 'next/link';\nimport Router from 'next/router';\n/**\n * Just setting up a folder structure creates URLs and pages, and they are all rendered server-side. No need\n * for routing at all. There's also automatic code splitting since this is all rendered server side. \n * You cannot use CSS modules if using NextJs, but you can use styled jsx instead.. \n * This isn't a normal lifecycle hook, as it is static and can be called without the component being \n * instantiated. It executes first on the server, so you could do the pre-populating of props from a \n * database or whatever.\n * We can be sure that this.props.appName will be available as getInitialProps runs first and the code\n * continues only after resolving the promise.  \n */\n\nclass IndexPage extends Component {\n  static getInitialProps(context) {\n    const promise = new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve({\n          appName: 'Super App'\n        });\n      }, 1000);\n    });\n    return promise;\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(\"h1\", null, \"The main page of \", this.props.appName), __jsx(\"p\", null, \"Go to \", __jsx(Link, {\n      href: \"/auth\"\n    }, __jsx(\"a\", null, \"Auth\"))), __jsx(\"button\", {\n      onClick: () => Router.push(\"/auth\")\n    }, \"Go to Auth\"));\n  }\n\n}\n\nexport default IndexPage;","map":null,"metadata":{},"sourceType":"module"}