{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/shubmeister/Desktop/ReactUdemy/NextJS/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Link from 'next/link';\nimport Router from 'next/router';\n/**\n * Just setting up a folder structure creates URLs and pages, and they are all rendered server-side. No need\n * for routing at all. There's also automatic code splitting since this is all rendered server side. \n * You cannot use CSS modules if using NextJs, but you can use styled jsx instead.. \n * This isn't a normal lifecycle hook, as it is static and can be called without the component being \n * instantiated. It executes first on the server, so you could do the pre-populating of props from a \n * database or whatever.\n * We can be sure that this.props.appName will be available as getInitialProps runs first and the code\n * continues only after resolving the promise. \n */\n\nvar IndexPage = /*#__PURE__*/function (_Component) {\n  _inherits(IndexPage, _Component);\n\n  var _super = _createSuper(IndexPage);\n\n  function IndexPage() {\n    _classCallCheck(this, IndexPage);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(IndexPage, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 16\n        }\n      }, __jsx(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }\n      }, \"The main page of \", this.props.appName), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }\n      }, \"Go to \", __jsx(Link, {\n        href: \"/auth\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 22\n        }\n      }, __jsx(\"a\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 41\n        }\n      }, \"Auth\"))), __jsx(\"button\", {\n        onClick: function onClick() {\n          return Router.push(\"/auth\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }\n      }, \"Go to Auth\"));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(context) {\n      console.log(context);\n      var promise = new Promise(function (resolve, reject) {\n        setTimeout(function () {\n          resolve({\n            appName: 'Super App'\n          });\n        }, 1000);\n      });\n      return promise;\n    }\n  }]);\n\n  return IndexPage;\n}(Component);\n\nexport default IndexPage;","map":{"version":3,"sources":["/Users/shubmeister/Desktop/ReactUdemy/NextJS/pages/index.js"],"names":["React","Component","Link","Router","IndexPage","props","appName","push","context","console","log","promise","Promise","resolve","reject","setTimeout"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA;;;;;;;;;;;IAUMC,S;;;;;;;;;;;;;6BAYO;AACL,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAsB,KAAKC,KAAL,CAAWC,OAAjC,CADG,EAEH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAS,MAAC,IAAD;AAAM,QAAA,IAAI,EAAC,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAnB,CAAT,CAFG,EAGH;AAAQ,QAAA,OAAO,EAAE;AAAA,iBAAMH,MAAM,CAACI,IAAP,CAAY,OAAZ,CAAN;AAAA,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHG,CAAP;AAKH;;;oCAjBsBC,O,EAAS;AAC5BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,UAAMG,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC7CC,QAAAA,UAAU,CAAC,YAAM;AACbF,UAAAA,OAAO,CAAC;AAACP,YAAAA,OAAO,EAAE;AAAV,WAAD,CAAP;AACH,SAFS,EAEP,IAFO,CAAV;AAGH,OAJe,CAAhB;AAMA,aAAOK,OAAP;AACH;;;;EAVmBV,S;;AAqBxB,eAAeG,SAAf","sourcesContent":["import React, { Component } from 'react'\nimport Link from 'next/link'\nimport Router from 'next/router'\n\n/**\n * Just setting up a folder structure creates URLs and pages, and they are all rendered server-side. No need\n * for routing at all. There's also automatic code splitting since this is all rendered server side. \n * You cannot use CSS modules if using NextJs, but you can use styled jsx instead.. \n * This isn't a normal lifecycle hook, as it is static and can be called without the component being \n * instantiated. It executes first on the server, so you could do the pre-populating of props from a \n * database or whatever.\n * We can be sure that this.props.appName will be available as getInitialProps runs first and the code\n * continues only after resolving the promise. \n */\nclass IndexPage extends Component {\n    static getInitialProps(context) {\n        console.log(context)\n        const promise = new Promise((resolve, reject) => {\n            setTimeout(() => {\n                resolve({appName: 'Super App'})\n            }, 1000)\n        })\n\n        return promise\n    }\n\n    render() {\n        return <div>\n            <h1>The main page of {this.props.appName}</h1>\n            <p>Go to <Link href=\"/auth\"><a>Auth</a></Link></p>\n            <button onClick={() => Router.push(\"/auth\")}>Go to Auth</button>\n        </div>\n    }\n}\n\nexport default IndexPage"]},"metadata":{},"sourceType":"module"}