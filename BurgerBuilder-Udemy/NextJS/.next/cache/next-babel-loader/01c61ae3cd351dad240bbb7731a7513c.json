{"ast":null,"code":"var _jsxFileName = \"/Users/shubmeister/Desktop/ReactUdemy/NextJS/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Link from 'next/link';\nimport Router from 'next/router';\n/**\n * Just setting up a folder structure creates URLs and pages, and they are all rendered server-side. No need\n * for routing at all. There's also automatic code splitting since this is all rendered server side. \n * You cannot use CSS modules if using NextJs, but you can use styled jsx instead.. \n * This isn't a normal lifecycle hook, as it is static and can be called without the component being \n * instantiated. \n */\n\nclass IndexPage extends Component {\n  static async getInitialProps(context) {\n    console.log(context);\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 16\n      }\n    }, __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }\n    }, \"The main page\"), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }\n    }, \"Go to \", __jsx(Link, {\n      href: \"/auth\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 22\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 41\n      }\n    }, \"Auth\"))), __jsx(\"button\", {\n      onClick: () => Router.push(\"/auth\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }\n    }, \"Go to Auth\"));\n  }\n\n}\n\nexport default IndexPage;","map":{"version":3,"sources":["/Users/shubmeister/Desktop/ReactUdemy/NextJS/pages/index.js"],"names":["React","Component","Link","Router","IndexPage","getInitialProps","context","console","log","render","push"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA;;;;;;;;AAOA,MAAMC,SAAN,SAAwBH,SAAxB,CAAkC;AAC9B,eAAaI,eAAb,CAA6BC,OAA7B,EAAsC;AAClCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACH;;AAEDG,EAAAA,MAAM,GAAG;AACL,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADG,EAEH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAS,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAnB,CAAT,CAFG,EAGH;AAAQ,MAAA,OAAO,EAAE,MAAMN,MAAM,CAACO,IAAP,CAAY,OAAZ,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHG,CAAP;AAKH;;AAX6B;;AAclC,eAAeN,SAAf","sourcesContent":["import React, { Component } from 'react'\nimport Link from 'next/link'\nimport Router from 'next/router'\n\n/**\n * Just setting up a folder structure creates URLs and pages, and they are all rendered server-side. No need\n * for routing at all. There's also automatic code splitting since this is all rendered server side. \n * You cannot use CSS modules if using NextJs, but you can use styled jsx instead.. \n * This isn't a normal lifecycle hook, as it is static and can be called without the component being \n * instantiated. \n */\nclass IndexPage extends Component {\n    static async getInitialProps(context) {\n        console.log(context)\n    }\n\n    render() {\n        return <div>\n            <h1>The main page</h1>\n            <p>Go to <Link href=\"/auth\"><a>Auth</a></Link></p>\n            <button onClick={() => Router.push(\"/auth\")}>Go to Auth</button>\n        </div>\n    }\n}\n\nexport default IndexPage"]},"metadata":{},"sourceType":"module"}